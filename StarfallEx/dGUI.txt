--@name dGUI
--@author D.
--@include https://raw.githubusercontent.com/OctothorpeObelus/dGmodScripts/master/StarfallEx/fontAwesome.txt as fontAwesome.txt

require("fontAwesome.txt")

--[[
    TODO:

        - Improve Docking!
        - Priorities (BringToFront, MoveBack etc)
        - Grid Layout
        - Ability to set cursorPos manually
]]

--[[
    Changelog:
        - Fixed layouting when objects werent calced/rendered yet
        - registerAttribute function
        - Added docking
        - Fixed major input glitch
]]

DOCK_NONE = 0
DOCK_LEFT = 1
DOCK_RIGHT = 2
DOCK_TOP = 3
DOCK_BOTTOM = 4
DOCK_FILL = 5

local dgui = {
    _DEBUG = false,
    _ENABLE_SCISSOR = true,
    FPS = 300,
    context = {
        curX = 0,
        curY = 0,
        hovered = false,
        pressed = false,
        focused = false,
    },
    Canvas = nil,
    DOCK_NONE = DOCK_NONE,
    DOCK_LEFT = DOCK_LEFT,
    DOCK_RIGHT = DOCK_RIGHT,
    DOCK_TOP = DOCK_TOP,
    DOCK_BOTTOM = DOCK_BOTTOM,
    DOCK_FILL = DOCK_FILL,
}

local dgui_runEvent

local RENDERED_ONCE = false
local INPUT_CAUGHT_LAST_FRAME = false
---------------
------
---------------
local debugFont = render.createFont("Roboto Mono", 20, 400, true)
local defaultFont = render.createFont("Roboto", 40, 500, true)
local keyFont = render.createFont("Roboto", 25, 500, true)

render.createRenderTarget("dgui_buffer")

---------------
------
---------------

local DGUI_CANVAS = nil

local DGUI_CLASSES = {}
local LAYOUT_QUEUE = {}

---------------
------
---------------
local FOCUSED_OBJ = nil
local HOVERED_OBJ = nil
local PRESSED_OBJ = nil

---------------
------
---------------
local UID = 0
local USE_KEY,USE_KEY_NAME = input.lookupBinding("+use")
local lTime = 0
local DELTA_TIME = 0
---------------
------
---------------

--[[ Registers attribute and adds getter/setter if it doesnt exist ]]

local function registerAttribute(tab, name, default)
    local lower = name:sub(1,1):lower()..name:sub(2)
    local upper = name:sub(1,1):upper()..name:sub(2)

    if not tab["set"..upper] then
        tab["set"..upper] = function(self,val) self[lower] = val end
    end

    if not tab["get"..upper] then
        tab["get"..upper] = function(self) return self[lower] end
    end
    tab._fields = tab._fields or {}
    tab._fields[lower] = default
end

--[[ Color*value without changing alpha ]]
local function mc(col,m)
    return Color(col.r * m, col.g * m, col.b * m, a)
end

--[[ Fade between colors ]]
local function mixColor(c1,c2, prog)
    return c1*prog + c2*(1-prog)
end

--[[ Returns true if point x,y is inside box x2,y2,w,h ]]
local function inBox(x, y, x2, y2, w, h)
    return x >= x2 and x <= x2+w and y >= y2 and y <= y2+h
end

--[[ Calls init function of element and it's classe's parents ]]
local function initElement(class,obj)
    local meta = getmetatable(class)

    if meta.__super then
        initElement(meta.__super,obj)
    end
    local fields = rawget(class,"_fields")
    if fields then
        for k,v in pairs(fields) do -- Adding attributes
            obj[k] = v
        end
    end

    if class.init then
	       class.init(obj)
    end
end

local function checkObjectInput(obj)
    local children = obj.children
    if #children > 0 then
        for k = #children, 1, -1 do
            local v = children[k]
            if not v.enabled or not v.catchFocus or not v.visible then continue end
            checkObjectInput(v)
        end
    end

    if not INPUT_CAUGHT_LAST_FRAME then
        if inBox(dgui.cursorX or 0,dgui.cursorY or 0, obj.realX, obj.realY, obj.realWidth, obj.realHeight) then
            HOVERED_OBJ = obj
            INPUT_CAUGHT_LAST_FRAME = true
        end
    end
end



--[[ That function does kinda too much and should be split ]]
local function renderObject(obj, minx, miny, maxx, maxy)
    obj.visible = true
    obj.realX = minx
    obj.realY = miny
    obj.realWidth = maxx - minx
    obj.realHeight = maxy - miny



    if dgui._ENABLE_SCISSOR then
        render.enableScissorRect(minx*2, miny*2, maxx*2, maxy*2)
    end

    render.pushMatrix(obj.matrix,true)
        local w,h = obj.width,obj.height
        obj.width = obj.width * 2
        obj.height = obj.height * 2

        dgui_runEvent(obj, "render")

        obj.width = w
        obj.height = h

    render.popMatrix()

    if dgui._DEBUG then
        render.setColor(Color(255,0,255))
        render.setFont(debugFont)
        local hovertext = HOVERED_OBJ == obj and "\n|HOVERED|" or ""
        local presstext = PRESSED_OBJ == obj and "\n|PRESSED|" or ""
        local dfr = ""
        local postext = obj.x..","..obj.y.."|"
        render.drawText(obj.realX * 2, obj.realY * 2, obj.name..postext..hovertext..presstext..dfr)

        render.setColor(Color(255,0,0))

        render.drawRect(obj.realX * 2, obj.realY * 2, obj.realWidth * 2, 1)
        render.drawRect(obj.realX * 2, obj.realY * 2 + obj.realHeight * 2 -1, obj.realWidth * 2, 1)

        render.drawRect(obj.realX * 2, obj.realY * 2, 1, obj.realHeight * 2)
        render.drawRect(obj.realX * 2 + obj.realWidth * 2 - 1, obj.realY * 2, 1, obj.realHeight * 2)

        render.drawLine(minx*2,miny*2,maxx*2,maxy*2)
    end



    local children = obj.children
    if #children > 0 then
        for k = 1, #children do
            local v = children[k]
            local maxx = maxx
            local maxy = maxy
            local minx = minx
            local miny = miny

            minx = math.max(minx, v.x)
            miny = math.max(miny, v.y)


            maxx = math.min(maxx, v.x + v.width)
            maxy = math.min(maxy, v.y + v.height)

            if not v.enabled then continue end

            if maxx <= minx or maxy <= miny then
                v.visible = false
                continue
            end

            renderObject(v, minx, miny, maxx, maxy)
        end
    end

end


---------------
------
---------------

--[[ Runs event on object (setups context before running function) ]]
function dgui.runEvent(obj, eventName, ...)
    if not obj or not obj.visible or not obj.enabled then return end
    -- Setting up context
    dgui.context.curX = ((dgui.cursorX or 0) - obj.x) * 2
    dgui.context.curY = ((dgui.cursorY or 0) - obj.y) * 2

    dgui.context.hovered = (obj == HOVERED_OBJ)
    dgui.context.pressed = (obj == PRESSED_OBJ)
    dgui.context.focused = (obj == FOCUSED_OBJ)

    if obj[eventName] then
        obj[eventName](obj, ...)
    end
    --

end
dgui_runEvent = dgui.runEvent

--[[ Registers new DGUI class ]]
function dgui.register(name, tab, parent)
    local superclass = DGUI_CLASSES[parent]
    setmetatable(tab, {
        __index = function(self, key)
            if key ~= "constructor" and superclass then
                return superclass[key]
            end
            return nil
        end,
        __super = superclass,
        __tostring = function() return name end
    })


    DGUI_CLASSES[name] = tab
end

local function isValidDGUI(obj)
    return obj.valid
end

--[[ Creates object ]]
function dgui.create(name, parent,debugname)

    local ret = setmetatable({}, {
		      __index = DGUI_CLASSES[name]
	   })
    ret.uid = name.."_"..UID
    UID = UID + 1
    ret.name = debugname or name
    ret.classname = name
    ret.children = {}
    ret.localX = 0
    ret.localY = 0
    ret.x = 0
    ret.y = 0
    ret.hovered = false
    ret.width = 100
    ret.height = 100
    ret.realX = 0
    ret.realY = 0
    ret.realWidth = ret.width
    ret.realHeight = ret.height
    ret.catchFocus = true
    ret.matrix = Matrix()
    ret.enabled = true
    ret.valid = true
    ret.isValid = isValidDGUI
    initElement(DGUI_CLASSES[name], ret)

    ret:setParent(parent)
    return ret

end

--[[ This function should be called in think hook ]]
function dgui.think()
    if not RENDERED_ONCE then return end
    local curX, curY = dgui.cursorX, dgui.cursorY
    curX = curX or 0
    curY = curY or 0

    INPUT_CAUGHT_LAST_FRAME = false -- if it's nil it means we dont need process input anyway, so mark it as processed
    checkObjectInput(DGUI_CANVAS)

    if #LAYOUT_QUEUE > 0 then
        table.sort(LAYOUT_QUEUE,function(a, b)
            return (a.priority or 0) > (b.priority or 0)
        end)
        for k,v in pairs(LAYOUT_QUEUE) do
            dgui_runEvent(v, "doLayout")
            v:fixPos()
            v.shouldPerformLayout  = false
        end
        LAYOUT_QUEUE = {}
    end
end

--[[ Renders UI ]]
function dgui.render()
    dgui.cursorX, dgui.cursorY = render.cursorPos()
    dgui.cursorX = dgui.cursorX or 0
    dgui.cursorY = dgui.cursorY or 0

    DELTA_TIME = timer.curtime() - lTime
    if DELTA_TIME > 1/dgui.FPS then
        render.selectRenderTarget("dgui_buffer")
        render.clear(Color(0,0,0,0))

        renderObject(DGUI_CANVAS, 0,0,512,512)


        render.disableScissorRect()
        render.selectRenderTarget()
        lTime = timer.curtime()

    end


    render.setRenderTargetTexture("dgui_buffer")
    render.setRGBA(255,255,255,255)
    render.drawTexturedRect(0, 0, 512, 512)
    RENDERED_ONCE = true
end

--[[ Lets UI know that key was pressed ]]
function dgui.keyDown(key)
    if key == USE_KEY then
        dgui.setFocusedObject(HOVERED_OBJ)
        PRESSED_OBJ = HOVERED_OBJ
        dgui_runEvent(FOCUSED_OBJ, "onStartUsing")
    end
    dgui_runEvent(FOCUSED_OBJ, "onKeyDown", key)
end

--[[ Lets UI know that key was released]]
function dgui.keyUp(key)

    dgui_runEvent(FOCUSED_OBJ, "onKeyUp", key)

    if key == USE_KEY then
        dgui_runEvent(PRESSED_OBJ, "onStopUsing", key)
        PRESSED_OBJ = nil
    end
end

--[[ Sets current focused object ]]
function dgui.setFocusedObject(obj)
    if FOCUSED_OBJ == obj then return end
    dgui_runEvent(FOCUSED_OBJ, "onLoseFocus")
    FOCUSED_OBJ = obj
    dgui_runEvent(FOCUSED_OBJ, "onFocus")
end

-------------------------
--- Canvas (Internal) ---
-------------------------
--Note: IT'S INTERNAL OBJECT, DONT CREATE IT

local dCanvas = {}
function dCanvas:init()
    self.localX = 0
    self.localY = 0
    self.x = 0
    self.y = 0
    self.width = 512
    self.height = 512
    self.matrix:setTranslation(Vector())
end
function dCanvas:performLayout() end
function dCanvas:setParent() end
dgui.register("_CANVAS_",dCanvas)

dgui.Canvas = dgui.create("_CANVAS_")
DGUI_CANVAS = dgui.Canvas

-------------
--- Panel ---
-------------

local dPanel = {}

function dPanel:init()
    self.dockID = DOCK_NONE
    self.color = Color(11, 11, 11)
end

registerAttribute(dPanel, "color", Color(11, 11, 11))
registerAttribute(dPanel, "enabled", true)


function dPanel:enableInput(enable)
    self.catchFocus = enable
end

function dPanel:dock(id)
    self.dockID = (id >= DOCK_NONE and id <= DOCK_FILL) and id or DOCK_NONE
    self.parent:performLayout()
end

function dPanel:doLayout()
    local topSize = 0
    local bottomSize = 0
    local leftSize = 0
    local rightSize = 0
    local fills = {}

    for k,v in pairs(self.children) do
        local w = v.width
        local h = v.height
        local x = v.localX
        local y = v.localY

        if v.dockID == DOCK_NONE then continue

        elseif v.dockID == DOCK_LEFT then
            x = leftSize
            y = topSize
            h = self.height - topSize-bottomSize
            leftSize = leftSize + w
        elseif v.dockID == DOCK_TOP then
            x = leftSize
            y = topSize
            w = self.width - leftSize-rightSize
            topSize = topSize + h

        elseif v.dockID == DOCK_BOTTOM then
            x = leftSize
            y = self.height - bottomSize - h
            w = self.width - leftSize-rightSize
            bottomSize = bottomSize + h
        elseif v.dockID == DOCK_RIGHT then
            x = self.width - rightSize - w
            y = topSize
            h = self.height - topSize-bottomSize
            leftSize = leftSize + w
        elseif v.dockID == DOCK_FILL then
            table.insert(fills,v)
        end


        v.localX = x
        v.localY = y
        v.width = w
        v.height = h
    end
    for k,v in pairs(fills) do
        v.localX = leftSize
        v.localY = topSize
        v.width = self.width - leftSize - rightSize
        v.height = self.height -topSize - bottomSize
    end

end

function dPanel:performLayout()
    if not self.shouldPerformLayout then
        self.shouldPerformLayout = true
        table.insert(LAYOUT_QUEUE,self)
    end
    for k,v in pairs(self.children) do
        v:performLayout()
    end
end

function dPanel:setPos(x,y) -- Sets position
    self.localX = math.floor(x)
    self.localY =  math.floor(y)
    self:fixPos()

end

function dPanel:getPos(x,y)
    return self.localX,self.localY
end

function dPanel:forceFocus()
    dgui.setFocusedObject(self)
end

function dPanel:setSize(w,h)
    self.width = math.floor(w)
    self.height = math.floor(h)

    if self.parent then
        self.parent:performLayout()
    end
    self:performLayout()
end

function dPanel:getSize()
    return self.width,self.height
end

function dPanel:remove()
    self.valid = false
    for k,v in pairs(self.children) do
        v:remove()
    end
    table.removeByValue(self.parent.children,self)
    table.removeByValue(LAYOUT_QUEUE,self)
end

function dPanel:setParent(parent) -- Sets parent
    if parent == self then
        error("Can't parent to self!")
    end
    parent = parent or DGUI_CANVAS
    if self.parent then
        table.removeByValue(self.parent.children, self)
        self.parent:performLayout(self.parent) -- Old one

    end

    self.parent = parent
    table.insert(parent.children, self)

    parent:performLayout() -- new one

    self:fixPos()

end

function dPanel:fixPos() -- Recalculates global position and position of children

    self.x = self.parent.x + self.localX
    self.y = self.parent.y + self.localY


    self.matrix:setTranslation(Vector(self.x, self.y, 0)*2)

    for k,v in pairs(self.children) do
        v:fixPos()
    end

end

function dPanel:render()
    render.setColor(self.color)
    render.drawRect(0, 0, self.width, self.height)
end

dgui.register("DPanel",dPanel)

-------------------
--- Layout Base ---
-------------------

local dLayoutBase = {}

registerAttribute(dLayoutBase, "expandHorizontal", true)
registerAttribute(dLayoutBase, "expandVertical", true)
registerAttribute(dLayoutBase, "topMargin", 5)
registerAttribute(dLayoutBase, "bottomMargin", 5)
registerAttribute(dLayoutBase, "leftMargin", 5)
registerAttribute(dLayoutBase, "rightMargin", 5)
registerAttribute(dLayoutBase, "verticalSpacing", 5)
registerAttribute(dLayoutBase, "horizontalSpacing", 5)
registerAttribute(dLayoutBase, "topMargin", 5)

function dLayoutBase:setSpacing(m)
    self.verticalSpacing = m
    self.horizontalSpacing = m
end

dgui.register("DLayoutBase", dLayoutBase, "DPanel")

-----------------------
--- Vertical Layout ---
-----------------------

local dVerticalLayout = {}
function dVerticalLayout:doLayout()

    local sumHeight = self.topMargin

    local count = #self.children

    local newHeight = (self.height - self.topMargin - self.bottomMargin + self.verticalSpacing)/count - self.verticalSpacing

    for k,v in pairs(self.children) do
        local height = v.height
        local width = v.width

        if self.expandHorizontal then
            width = self.width - self.leftMargin - self.rightMargin
        end
        if self.expandVertical then
            height = newHeight
        end

        v:setPos(self.leftMargin, sumHeight)

        sumHeight = sumHeight + height + self.verticalSpacing

        v:setSize(width,height)
    end
end

dgui.register("DVerticalLayout", dVerticalLayout, "DLayoutBase")

-------------------------
--- Horizontal Layout ---
-------------------------

local dVerticalLayout = {}
function dVerticalLayout:doLayout()

    local sumWidth = self.leftMargin

    local count = #self.children

    local newWidth = (self.width - self.leftMargin - self.rightMargin + self.horizontalSpacing)/count - self.horizontalSpacing

    for k,v in pairs(self.children) do
        local height = v.height
        local width = v.width

        if self.expandHorizontal then
            width = newWidth
        end
        if self.expandVertical then
            height =  self.height - self.topMargin - self.bottomMargin
        end

        v:setPos(sumWidth, self.topMargin)

        sumWidth = sumWidth + width + self.horizontalSpacing

        v:setSize(width,height)
    end
end

dgui.register("DHorizontalLayout", dVerticalLayout, "DLayoutBase")

-------------
--- Label ---
-------------

local dLabel = {}

function dLabel:init()
    self.catchFocus = false
    render.setFont(self.font)
    self.textwidth,self.textheight = render.getTextSize(self.text)
end

function dLabel:setFont(font)
    self.font = font
    render.setFont(self.font)
    self.textwidth,self.textheight = render.getTextSize(self.text)
end

function dLabel:setText(text)
    self.text = text
    render.setFont(self.font)
    self.textwidth,self.textheight = render.getTextSize(self.text)
end

registerAttribute(dLabel,"font", defaultFont)
registerAttribute(dLabel,"textColor", Color(255, 255, 255))
registerAttribute(dLabel,"alignment", 5)
registerAttribute(dLabel,"text", "Label")


function dLabel:render()

    local w,h = self.width, self.height

    render.setFont(self.font)
    render.setColor(self.textColor)

    if self.alignment == 7 then
        render.drawText(0, 0, self.text, 0)
    elseif self.alignment == 8 then
        render.drawText(w/2, 0, self.text, 1)
    elseif self.alignment == 9 then
        render.drawText(w, 0, self.text, 2)


    elseif self.alignment == 4 then
        render.drawText(0, h/2 - self.textheight/2, self.text, 0)
    elseif self.alignment == 5 then
        render.drawText(w/2, h/2 - self.textheight/2, self.text, 1)
    elseif self.alignment == 6 then
        render.drawText(w, h/2 - self.textheight/2, self.text, 2)


    elseif self.alignment == 1 then
        render.drawText(0, h - self.textheight, self.text, 0)
    elseif self.alignment == 2 then
        render.drawText(w/2, h - self.textheight, self.text, 1)
    elseif self.alignment == 3 then
        render.drawText(w, h - self.textheight, self.text, 2)
    else
        self.alignment = 5
    end


end

dgui.register("DLabel", dLabel, "DPanel")

-------------------
--- Number Wang ---
-------------------

local dNumberWang = {}
dNumberWang.onValueChange = _EMPTYFUNC_

local wangFont = render.createFont("Roboto Mono", 60, 400, true, false, false, false, false, true)

function dNumberWang:init()
    self.color = Color(228, 228, 228)
    self.height = 20
    self.width = 70
    self.catchFocus = true
    self.wholeOnly = false
    self.editMode = false
    self.button = nil
    self.text = tostring(self.value)
end

function dNumberWang:setValue(val)
    self.value = val
    self.value = math.min(self.value, self.max)
    self.value = math.max(self.value, self.min)
    if self.wholeOnly then
        self.value = math.floor(self.value)
    end
    self.text= tostring(self.value)
end

registerAttribute(dNumberWang, "value", 0)
registerAttribute(dNumberWang, "wholeOnly", true)
registerAttribute(dNumberWang, "max", 100)
registerAttribute(dNumberWang, "min", 0)
registerAttribute(dNumberWang, "incrementValue", 1)

function dNumberWang:keyPress(key)
    if tonumber(key) then
        if self.text == "0" then self.text = "" end
        self.text = self.text .. key
    elseif key == "." and not self.text:find("%.") then
        self.text = self.text .. key
    elseif key == "FUNC_RESET" then
        self.text = ""
    elseif key == "backspace" then
        self.text = self.text:sub(1,-2)
    elseif key == "escape" then
        dgui.keypad:close()
         self.editMode = false
    elseif key =="-" and #self.text == 0 then
        self.text = self.text .. key
    elseif key =="enter" then
        if #self.text == 0 then
            self.text = "0"
        end
        self:setValue(tonumber(self.text))
         self.editMode = false
        dgui.keypad:close()
    end
end

function dNumberWang:onStartUsing()
    if self.button == 1 then
        self.value = self.value - self.incrementValue

    elseif self.button == 2 then
        self.value = self.value + self.incrementValue
    else

        dgui.keypad:open(self,function(keypad,key) self:keyPress(key) end, function(keypad) self.editMode = false; self:setValue(self:getValue()) end)
        self.editMode = true
        self.text = ""
    end

    if not self.editMode then
        self.value = math.min(self.value, self.max)
        self.value = math.max(self.value, self.min)

        self.text = tostring(self.value)
        dgui_runEvent(self, "onValueChange", self.value)
    end
end

function dNumberWang:render()
    local context = dgui.context
    local curX,curY = context.curX, context.curY

    self.button = nil
    render.setColor(mc(self.color, 0.3))
    render.drawRect(0, 0, self.height, self.height)

    render.drawRect(self.width-self.height, 0, self.height, self.height)

    render.setColor(self.color)
    render.drawRect(self.height, 0, self.width - self.height * 2, self.height)

    local l = self.height*0.5
    local s = self.height*0.1

    if curX < self.height then
        s = context.hovered and self.height*0.1 + 2 or self.height*0.1
        self.button = 1
    end
    render.drawRect(self.height/2 - l/2, self.height/2 - s/2, l, s)

    if curX > self.width - self.height then
        s = context.hovered and self.height*0.1 + 2 or self.height*0.1
        self.button = 2
    else
        s = self.height*0.1
    end


    render.drawRect(self.width - self.height/2 - l/2, self.height/2 - s/2, l, s)
    render.drawRect(self.width - self.height/2 - s/2, self.height/2 - l/2, s, l)

    render.setFont(self.font)
    render.setColor(mc(self.color, 0.2))

    render.drawText(self.width/2, self.height/2 - self.textheight/2, self.text, 1)

end

dgui.register("DNumberWang", dNumberWang, "DLabel")

--------------
--- Button ---
--------------

local dButton = {}

dButton.doAction = _EMPTYFUNC_

function dButton:init()
    self.catchFocus = true
    self.color = Color(0, 169, 250)
    self.height = 40
    self.barLength = 0
    self.alignment = 1
end

function dButton:onStopUsing()
    local context = dgui.context
    local curX,curY = context.curX, context.curY
end

function dButton:render()
    local context = dgui.context
    local curX,curY = context.curX, context.curY

    local targetlight = 0
    local barLength = self.barLength
    local targetlength = 8

    if context.pressed then
        targetlength = self.width
    elseif context.hovered then
        targetlength = 16
    end

    barLength = math.lerp(DELTA_TIME * 10, barLength, targetlength)

    self.barLength = barLength

    render.setColor(mc(self.color, 0.3))
    render.drawRect(0, 0, self.width, self.height)

    render.setColor(self.color)
    render.drawRect(0, 0, barLength, self.height)


    render.setColor(self.textColor)
    render.setFont(self.font)
    local w,h = render.getTextSize(self.text)
    render.drawText(self.width/2, self.height/2 - h/2, self.text, 1)

end

dgui.register("DButton", dButton, "DLabel")

--------------
--- Slider ---
--------------

local dSlider = {}

dSlider.onValueChange = _EMPTYFUNC_

function dSlider:init()
    self.color = Color(228, 228, 228)
    self.height = 20
    self.progress = 0
end

function dSlider:onStopUsing()
    dgui_runEvent(self, "onValueChange")
end

function dSlider:setValue(v)
    self.progress = (v - self.min)/(self.max-self.min)
end
registerAttribute(dSlider, "value", 0)
registerAttribute(dSlider, "min", 0)
registerAttribute(dSlider, "max", 1)
registerAttribute(dSlider, "progressive", true)
registerAttribute(dSlider, "wholeOnly", false)



function dSlider:render()
    local context = dgui.context
    local curX,curY = context.curX, context.curY


    local s = self.height/4
    local x = curX - s
    local p = x/(self.width - s * 2)

    p = math.max(p, 0)
    p = math.min(p, 1)

    if context.pressed then
        self.progress = p
    end

    self.value = self.min + (self.max - self.min) * self.progress
    if self.whole then self.value = math.round(self.value) end
    self.progress = (self.value - self.min)/(self.max-self.min)

    render.setColor(mc(self.color, 0.8))
    render.drawRect(0, 3, self.width, self.height - 6)

    if self.progressive then
        render.setColor(self.color)
        render.drawRect(0, 3, self.width * self.progress, self.height - 6)
    end

    render.setColor(mc(self.color, 0.3))

    render.drawRect(math.floor((self.width - s * 2) * self.progress), 0, math.floor(self.height - self.height/2), self.height)


end

dgui.register("DSlider", dSlider, "DPanel")

-----------------------
--- Slider Vertical ---
-----------------------

local dSliderVertical = {}

function dSliderVertical:init()
    self.width = 20
    self.height = 100
    self.progressive = false -- Changing the default
end

function dSliderVertical:render(curX, curY)
    local context = dgui.context
    local curX,curY = context.curX, context.curY

    local s = self.width/4
    local y = curY - s
    local p = y/(self.height - s * 2)

    p = math.max(p, 0)
    p = math.min(p, 1)

    if context.pressed then
        self.progress = p
    end

    self.value = self.min + (self.max - self.min) * self.progress
    if self.whole then self.value = math.round(self.value) end
    self.progress = (self.value - self.min)/(self.max-self.min)

    render.setColor(mc(self.color, 0.8))
    render.drawRect(3, 0, self.width -6, self.height)

    if self.progressive then
        render.setColor(self.color)
        render.drawRect(3, 0, self.width -6, self.height * self.progress)
    end

    render.setColor(mc(self.color, 0.3))

    render.drawRect(0, math.floor((self.height - s * 2) * self.progress), self.width, math.floor(self.width - self.width/2))


end

dgui.register("DSliderVertical", dSliderVertical, "DSlider")

----------------
--- Checkbox ---
----------------

local dCheckbox = {}

function dCheckbox:init()
    self.color = Color(0, 169, 250)
    self.offColor = Color(128,128,128)
    self.height = 20
    self.width = 30
    self.animprogress = 0
end

function dCheckbox:onStartUsing()
    self.value = not self.value
    dgui_runEvent(self,"onValueChange",self.value)
end

dCheckbox.onKeyUp = _EMPTYFUNC_

function dCheckbox:render(curX, curY)

    local s = self.height/4

    local p =  self.animprogress

    local target = self.value and 1 or 0

    p = math.lerp(DELTA_TIME*10 , p, target)

    if p > 0.95 then
        p = 1
    end


    self.animprogress = p

    local col = mixColor(self.color,self.offColor,p)

    render.setColor(mc(col, 0.8))
    render.drawRect(0, 3, self.width, self.height - 6)

    render.setColor(col)
    render.drawRect(0, 3, self.width * p, self.height - 6)

    render.setColor(mc(col, 0.3))

    render.drawRect((self.width - s * 2) * p, 0, self.height - self.height/2, self.height)

end

registerAttribute(dCheckbox,"value", false)

dgui.register("DCheckbox",dCheckbox,"DPanel")


--------------
--- Keypad ---
--------------

local dKeypad = {}

local keypad_keys = {
    1,2,3,"-",4,5,6,"C",7,8,9,"X","<",0,".",unichar("2713")
}

function dKeypad:init()
    self.keyColor = Color(228,228,228)
    self.color = Color(32,32,32)
    self.height = 45
    self.width = 34 + 11
    self.font = keyFont
    render.setFont(keyFont)
    local w,h = render.getTextSize("123456789.C")
    self.textheight = h
    self.button = nil
    self.text = "0"
end

function dKeypad:open(obj,onKey,onClose)
    self:setPos(obj.x + obj.width/2, obj.y + obj.height)
    self.editing = obj
    self.onKeypress = onKey
    self.onClose = onClose
    self.enabled = true
    self:forceFocus()
end

function dKeypad:close()
    self.editing = nil
    self.onKeypress = nil
    self.enabled = false
    if self.onClose then self:onClose() end
end


function dKeypad:onStartUsing()
    if self.button then
        local key = tostring(keypad_keys[self.button])
        if key == unichar("2713") then
            key = "enter"
        elseif key == "X" then
            key = "escape"
        elseif key =="<" then
            key = "backspace"
        elseif key =="C" then
            key = "FUNC_RESET"
        end
        dgui_runEvent(self,"onKeypress", key)
    end
end

function dKeypad:onLoseFocus()
    self:close()
end

function dKeypad:render()
    local context = dgui.context
    local curX,curY = dgui.context.curX, dgui.context.curY

    render.setColor(self.color)
    render.drawRect(0, 0, self.width, self.height)
    render.setFont(self.font)

    for I=1, #keypad_keys do
        local x = (I - 1)%4
        local y = math.floor((I - 1)/4)
        if inBox(curX, curY, x * 22 + 2, y * 22 + 2, 20, 20) then
            render.setColor(mc(self.keyColor, 0.5))
            self.button = I
        else
            if keypad_keys[I] == "X" or keypad_keys[I] == unichar("2713") then
                render.setColor(mc(self.keyColor, 0.8))

            else
                render.setColor(self.keyColor)
            end

        end

        render.drawRect(x * 22 + 2, y * 22 + 2, 20, 20)
        render.setColor(self.color)
        render.drawText(x * 22 + 2 + 10, y * 22 + 2 + 10 - self.textheight/2, tostring(keypad_keys[I]), 1)
    end

end

dgui.register("DKeypad",dKeypad,"DPanel")


dgui.keypad = dgui.create("DKeypad")
dgui.keypad.priority = math.huge
dgui.keypad.enabled = false
return dgui
